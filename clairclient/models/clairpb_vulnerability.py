# coding: utf-8

"""
    clair.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClairpbVulnerability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'namespace_name': 'str',
        'description': 'str',
        'link': 'str',
        'severity': 'str',
        'metadata': 'str',
        'fixed_by': 'str',
        'affected_versions': 'list[ClairpbFeature]'
    }

    attribute_map = {
        'name': 'name',
        'namespace_name': 'namespace_name',
        'description': 'description',
        'link': 'link',
        'severity': 'severity',
        'metadata': 'metadata',
        'fixed_by': 'fixed_by',
        'affected_versions': 'affected_versions'
    }

    def __init__(self, name=None, namespace_name=None, description=None, link=None, severity=None, metadata=None, fixed_by=None, affected_versions=None):  # noqa: E501
        """ClairpbVulnerability - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._namespace_name = None
        self._description = None
        self._link = None
        self._severity = None
        self._metadata = None
        self._fixed_by = None
        self._affected_versions = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if namespace_name is not None:
            self.namespace_name = namespace_name
        if description is not None:
            self.description = description
        if link is not None:
            self.link = link
        if severity is not None:
            self.severity = severity
        if metadata is not None:
            self.metadata = metadata
        if fixed_by is not None:
            self.fixed_by = fixed_by
        if affected_versions is not None:
            self.affected_versions = affected_versions

    @property
    def name(self):
        """Gets the name of this ClairpbVulnerability.  # noqa: E501


        :return: The name of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClairpbVulnerability.


        :param name: The name of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace_name(self):
        """Gets the namespace_name of this ClairpbVulnerability.  # noqa: E501


        :return: The namespace_name of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this ClairpbVulnerability.


        :param namespace_name: The namespace_name of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._namespace_name = namespace_name

    @property
    def description(self):
        """Gets the description of this ClairpbVulnerability.  # noqa: E501


        :return: The description of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClairpbVulnerability.


        :param description: The description of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this ClairpbVulnerability.  # noqa: E501


        :return: The link of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ClairpbVulnerability.


        :param link: The link of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def severity(self):
        """Gets the severity of this ClairpbVulnerability.  # noqa: E501


        :return: The severity of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ClairpbVulnerability.


        :param severity: The severity of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def metadata(self):
        """Gets the metadata of this ClairpbVulnerability.  # noqa: E501


        :return: The metadata of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ClairpbVulnerability.


        :param metadata: The metadata of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def fixed_by(self):
        """Gets the fixed_by of this ClairpbVulnerability.  # noqa: E501

        fixed_by exists when vulnerability is under feature.  # noqa: E501

        :return: The fixed_by of this ClairpbVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._fixed_by

    @fixed_by.setter
    def fixed_by(self, fixed_by):
        """Sets the fixed_by of this ClairpbVulnerability.

        fixed_by exists when vulnerability is under feature.  # noqa: E501

        :param fixed_by: The fixed_by of this ClairpbVulnerability.  # noqa: E501
        :type: str
        """

        self._fixed_by = fixed_by

    @property
    def affected_versions(self):
        """Gets the affected_versions of this ClairpbVulnerability.  # noqa: E501

        affected_versions exists when vulnerability is under notification.  # noqa: E501

        :return: The affected_versions of this ClairpbVulnerability.  # noqa: E501
        :rtype: list[ClairpbFeature]
        """
        return self._affected_versions

    @affected_versions.setter
    def affected_versions(self, affected_versions):
        """Sets the affected_versions of this ClairpbVulnerability.

        affected_versions exists when vulnerability is under notification.  # noqa: E501

        :param affected_versions: The affected_versions of this ClairpbVulnerability.  # noqa: E501
        :type: list[ClairpbFeature]
        """

        self._affected_versions = affected_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClairpbVulnerability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
