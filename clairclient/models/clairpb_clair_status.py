# coding: utf-8

"""
    clair.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClairpbClairStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'listers': 'list[str]',
        'detectors': 'list[str]',
        'last_update_time': 'datetime'
    }

    attribute_map = {
        'listers': 'listers',
        'detectors': 'detectors',
        'last_update_time': 'last_update_time'
    }

    def __init__(self, listers=None, detectors=None, last_update_time=None):  # noqa: E501
        """ClairpbClairStatus - a model defined in OpenAPI"""  # noqa: E501

        self._listers = None
        self._detectors = None
        self._last_update_time = None
        self.discriminator = None

        if listers is not None:
            self.listers = listers
        if detectors is not None:
            self.detectors = detectors
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def listers(self):
        """Gets the listers of this ClairpbClairStatus.  # noqa: E501


        :return: The listers of this ClairpbClairStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._listers

    @listers.setter
    def listers(self, listers):
        """Sets the listers of this ClairpbClairStatus.


        :param listers: The listers of this ClairpbClairStatus.  # noqa: E501
        :type: list[str]
        """

        self._listers = listers

    @property
    def detectors(self):
        """Gets the detectors of this ClairpbClairStatus.  # noqa: E501


        :return: The detectors of this ClairpbClairStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._detectors

    @detectors.setter
    def detectors(self, detectors):
        """Sets the detectors of this ClairpbClairStatus.


        :param detectors: The detectors of this ClairpbClairStatus.  # noqa: E501
        :type: list[str]
        """

        self._detectors = detectors

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ClairpbClairStatus.  # noqa: E501


        :return: The last_update_time of this ClairpbClairStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ClairpbClairStatus.


        :param last_update_time: The last_update_time of this ClairpbClairStatus.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClairpbClairStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
