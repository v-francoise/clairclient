# coding: utf-8

"""
    clair.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClairpbFeature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'namespace_name': 'str',
        'version': 'str',
        'version_format': 'str',
        'vulnerabilities': 'list[ClairpbVulnerability]'
    }

    attribute_map = {
        'name': 'name',
        'namespace_name': 'namespace_name',
        'version': 'version',
        'version_format': 'version_format',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, name=None, namespace_name=None, version=None, version_format=None, vulnerabilities=None):  # noqa: E501
        """ClairpbFeature - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._namespace_name = None
        self._version = None
        self._version_format = None
        self._vulnerabilities = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if namespace_name is not None:
            self.namespace_name = namespace_name
        if version is not None:
            self.version = version
        if version_format is not None:
            self.version_format = version_format
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def name(self):
        """Gets the name of this ClairpbFeature.  # noqa: E501


        :return: The name of this ClairpbFeature.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClairpbFeature.


        :param name: The name of this ClairpbFeature.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace_name(self):
        """Gets the namespace_name of this ClairpbFeature.  # noqa: E501


        :return: The namespace_name of this ClairpbFeature.  # noqa: E501
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this ClairpbFeature.


        :param namespace_name: The namespace_name of this ClairpbFeature.  # noqa: E501
        :type: str
        """

        self._namespace_name = namespace_name

    @property
    def version(self):
        """Gets the version of this ClairpbFeature.  # noqa: E501


        :return: The version of this ClairpbFeature.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClairpbFeature.


        :param version: The version of this ClairpbFeature.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def version_format(self):
        """Gets the version_format of this ClairpbFeature.  # noqa: E501


        :return: The version_format of this ClairpbFeature.  # noqa: E501
        :rtype: str
        """
        return self._version_format

    @version_format.setter
    def version_format(self, version_format):
        """Sets the version_format of this ClairpbFeature.


        :param version_format: The version_format of this ClairpbFeature.  # noqa: E501
        :type: str
        """

        self._version_format = version_format

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this ClairpbFeature.  # noqa: E501


        :return: The vulnerabilities of this ClairpbFeature.  # noqa: E501
        :rtype: list[ClairpbVulnerability]
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this ClairpbFeature.


        :param vulnerabilities: The vulnerabilities of this ClairpbFeature.  # noqa: E501
        :type: list[ClairpbVulnerability]
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClairpbFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
