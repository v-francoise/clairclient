# coding: utf-8

"""
    clair.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClairpbPostAncestryRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ancestry_name': 'str',
        'format': 'str',
        'layers': 'list[PostAncestryRequestPostLayer]'
    }

    attribute_map = {
        'ancestry_name': 'ancestry_name',
        'format': 'format',
        'layers': 'layers'
    }

    def __init__(self, ancestry_name=None, format=None, layers=None):  # noqa: E501
        """ClairpbPostAncestryRequest - a model defined in OpenAPI"""  # noqa: E501

        self._ancestry_name = None
        self._format = None
        self._layers = None
        self.discriminator = None

        if ancestry_name is not None:
            self.ancestry_name = ancestry_name
        if format is not None:
            self.format = format
        if layers is not None:
            self.layers = layers

    @property
    def ancestry_name(self):
        """Gets the ancestry_name of this ClairpbPostAncestryRequest.  # noqa: E501


        :return: The ancestry_name of this ClairpbPostAncestryRequest.  # noqa: E501
        :rtype: str
        """
        return self._ancestry_name

    @ancestry_name.setter
    def ancestry_name(self, ancestry_name):
        """Sets the ancestry_name of this ClairpbPostAncestryRequest.


        :param ancestry_name: The ancestry_name of this ClairpbPostAncestryRequest.  # noqa: E501
        :type: str
        """

        self._ancestry_name = ancestry_name

    @property
    def format(self):
        """Gets the format of this ClairpbPostAncestryRequest.  # noqa: E501


        :return: The format of this ClairpbPostAncestryRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ClairpbPostAncestryRequest.


        :param format: The format of this ClairpbPostAncestryRequest.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def layers(self):
        """Gets the layers of this ClairpbPostAncestryRequest.  # noqa: E501


        :return: The layers of this ClairpbPostAncestryRequest.  # noqa: E501
        :rtype: list[PostAncestryRequestPostLayer]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this ClairpbPostAncestryRequest.


        :param layers: The layers of this ClairpbPostAncestryRequest.  # noqa: E501
        :type: list[PostAncestryRequestPostLayer]
        """

        self._layers = layers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClairpbPostAncestryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
